<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Docker Compose安装</title>
    <link href="undefined2019/09/14/Docker%20Compose%E5%AE%89%E8%A3%85/"/>
    <url>2019/09/14/Docker%20Compose%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h2 id="安装-Docker-Compose"><a href="#安装-Docker-Compose" class="headerlink" title="安装 Docker Compose"></a>安装 Docker Compose</h2><h4 id="官方安装方法"><a href="#官方安装方法" class="headerlink" title="官方安装方法"></a>官方安装方法</h4><ol><li><p>运行如下命令下载最新版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></li><li><p>添加执行权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></li><li><p>安装 <a href="https://docs.docker.com/compose/completion/" target="_blank" rel="noopener">completion</a> 以便能在bash和zsh的shell中运行completion命令（可选）</p></li><li><p>测试安装是否成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose --version</span><br><span class="line">docker-compose version 1.22.0, build 1719ceb</span><br></pre></td></tr></table></figure></li></ol><h4 id="加速通道安装"><a href="#加速通道安装" class="headerlink" title="加速通道安装"></a>加速通道安装</h4><p>Docker Compose 存放在Git Hub，不太稳定。<br>你可以也通过执行下面的命令，高速安装Docker Compose。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo curl -L https://get.daocloud.io/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose  </span><br><span class="line"></span><br><span class="line">$ sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://get.daocloud.io/#install-compose" target="_blank" rel="noopener">DaoCloud-install-compose</a><br><a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener">Docker-install-compose</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu16.04&amp;14.04下的docker安装</title>
    <link href="undefined2019/09/14/Docker%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/"/>
    <url>2019/09/14/Docker%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h4 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get remove docker docker-engine docker.io</span><br></pre></td></tr></table></figure><h4 id="安装linux的额外镜像包（仅ubuntu14-04需要）"><a href="#安装linux的额外镜像包（仅ubuntu14-04需要）" class="headerlink" title="安装linux的额外镜像包（仅ubuntu14.04需要）"></a>安装linux的额外镜像包（仅ubuntu14.04需要）</h4><p>执行如下操作，允许你使用aufs存储驱动。ubuntu16.04使用默认的overlay2存储驱动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line"></span><br><span class="line">$ sudo apt-get install \</span><br><span class="line">    linux-image-extra-$(uname -r) \</span><br><span class="line">    linux-image-extra-virtual</span><br></pre></td></tr></table></figure><h4 id="设置安装源"><a href="#设置安装源" class="headerlink" title="设置安装源"></a>设置安装源</h4><p>通过如下步骤，设置安装源仓库，这里我们使用阿里源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line"></span><br><span class="line">$ sudo apt-get install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line">    </span><br><span class="line">$ curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -  </span><br><span class="line"></span><br><span class="line">$ sudo add-apt-repository &quot;deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;</span><br></pre></td></tr></table></figure><h4 id="安装docker社区版"><a href="#安装docker社区版" class="headerlink" title="安装docker社区版"></a>安装docker社区版</h4><p>通过如下命令将安装docker最新版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line"></span><br><span class="line">$ sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure><h4 id="检验是否安装成功"><a href="#检验是否安装成功" class="headerlink" title="检验是否安装成功"></a>检验是否安装成功</h4><p>通过运行hello-world实例便可检验是否安装成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure></p><h4 id="创建一个docker用户组-可选"><a href="#创建一个docker用户组-可选" class="headerlink" title="创建一个docker用户组(可选)"></a>创建一个docker用户组(可选)</h4><p>docker后台进程是绑定的Unix的socket而不是TCP端口。默认情况下，Unix的socket属于用户root，其它用户要使用要通过sudo命令。由于这个原因，docker daemon通常使用root用户运行。</p><p>　　为了避免使用sudo当你使用docker命令的时候，创建一个Unix组名为docker并且添加用户。当docker daemon启动，它会分配Unix socket读写权限给所属的docker组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo groupadd docker</span><br><span class="line"></span><br><span class="line">$ sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure><p>校验生效。通过运行docker命令不带sudo：docker run hello-world，如果失败会有以下类似的信息：Cannot connect to the Docker daemon. Is ‘docker daemon’ running on this host?确保DOCKER_HOST环境变量没有设置。如果有取消它。</p><h2 id="卸载方法"><a href="#卸载方法" class="headerlink" title="卸载方法"></a>卸载方法</h2><h4 id="卸载docker社区版"><a href="#卸载docker社区版" class="headerlink" title="卸载docker社区版:"></a>卸载docker社区版:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get purge docker-ce</span><br></pre></td></tr></table></figure><h4 id="删除镜像、容器、卷"><a href="#删除镜像、容器、卷" class="headerlink" title="删除镜像、容器、卷"></a>删除镜像、容器、卷</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/" target="_blank" rel="noopener">Install Docker in ubuntu</a><br><a href="https://www.cnblogs.com/lighten/p/6034984.html" target="_blank" rel="noopener">ubuntu16.04安装docker</a>  </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>docker配合gitbook部署文档</title>
    <link href="undefined2019/09/14/gitbook%E6%96%87%E6%A1%A3%E9%83%A8%E7%BD%B2/"/>
    <url>2019/09/14/gitbook%E6%96%87%E6%A1%A3%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h4 id="安装gitbook"><a href="#安装gitbook" class="headerlink" title="安装gitbook"></a>安装gitbook</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g gitbook-cli</span><br></pre></td></tr></table></figure><h4 id="构建目录结构"><a href="#构建目录结构" class="headerlink" title="构建目录结构"></a>构建目录结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nginx-docker</span><br><span class="line">    --default.conf</span><br><span class="line">    --docker-compose.yml</span><br><span class="line">    --web</span><br><span class="line">        ---note</span><br></pre></td></tr></table></figure><h4 id="拉取文档仓库并编译"><a href="#拉取文档仓库并编译" class="headerlink" title="拉取文档仓库并编译"></a>拉取文档仓库并编译</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull &amp;&amp; rm -rf _book &amp;&amp; gitbook install &amp;&amp; gitbook build .</span><br></pre></td></tr></table></figure><h4 id="编写nginx服务配置"><a href="#编写nginx服务配置" class="headerlink" title="编写nginx服务配置"></a>编写nginx服务配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">➜  nginx-docker cat default.conf </span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name xxx.xxx.xx.xxx;</span><br><span class="line">  root /web;</span><br><span class="line"></span><br><span class="line">  location /note &#123;</span><br><span class="line">    alias /web/note/_book;</span><br><span class="line">    index index.html;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location  ^~ gitbook/ &#123;</span><br><span class="line">    root /web/gitbook/;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通过docker启动"><a href="#通过docker启动" class="headerlink" title="通过docker启动"></a>通过docker启动</h4><p>编写<code>docker-compse.yml</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">➜  nginx-docker cat docker-compose.yml </span><br><span class="line">version: &apos;2&apos;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  nginx:</span><br><span class="line">    image: nginx:latest</span><br><span class="line">    restart: always</span><br><span class="line">    container_name: nginx-web</span><br><span class="line">    network_mode: host</span><br><span class="line">    volumes:</span><br><span class="line">      - /var/run/docker.sock:/var/run/docker.sock</span><br><span class="line">      - ./web:/web</span><br><span class="line">      - ./default.conf:/etc/nginx/conf.d/default.conf</span><br></pre></td></tr></table></figure></p><h4 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h4><p>当执行<code>gitbook install</code>非常慢的时候，执行如下命令，变更npm安装源。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm config set registry=http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="undefined2019/09/14/hello-world/"/>
    <url>2019/09/14/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>基于docker的Spark on Mesos部署</title>
    <link href="undefined2019/09/14/%E5%9F%BA%E4%BA%8Edocker%E7%9A%84%20spark%20on%20mesos%20%E9%83%A8%E7%BD%B2/"/>
    <url>2019/09/14/%E5%9F%BA%E4%BA%8Edocker%E7%9A%84%20spark%20on%20mesos%20%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h3 id="前提概要"><a href="#前提概要" class="headerlink" title="前提概要"></a>前提概要</h3><h4 id="储备"><a href="#储备" class="headerlink" title="储备"></a>储备</h4><p>已搭好一个三台Zookeeper的集群，相关信息如下：<br>主机系统 | ip地址 | ID<br>— | — | —<br>ubuntu16.04 server | 192.168.24.173 | 1<br>ubuntu16.04 server | 192.168.24.179 | 2<br>ubuntu16.04 server | 192.168.24.178 | 3</p><h4 id="平台软件版本规划"><a href="#平台软件版本规划" class="headerlink" title="平台软件版本规划"></a>平台软件版本规划</h4><table><thead><tr><th>软件</th><th>版本</th></tr></thead><tbody><tr><td>zookeeper</td><td>3.4.13</td></tr><tr><td>mesos</td><td>1.6.1</td></tr><tr><td>spark</td><td>2.2.2</td></tr></tbody></table><h3 id="Mesos部署"><a href="#Mesos部署" class="headerlink" title="Mesos部署"></a>Mesos部署</h3><h4 id="拉取docker镜像"><a href="#拉取docker镜像" class="headerlink" title="拉取docker镜像"></a>拉取docker镜像</h4><h5 id="镜像源"><a href="#镜像源" class="headerlink" title="镜像源"></a>镜像源</h5><p>master: <a href="https://hub.docker.com/r/mesosphere/mesos-master/" target="_blank" rel="noopener">mesosphere/mesos-master</a><br>slave: <a href="https://hub.docker.com/r/mesosphere/mesos-slave/" target="_blank" rel="noopener">mesosphere/mesos-slave</a></p><h5 id="拉镜像"><a href="#拉镜像" class="headerlink" title="拉镜像"></a>拉镜像</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull mesosphere/mesos-master:1.6.1-rc2</span><br><span class="line">$ docker pull mesosphere/mesos-master:1.6.1-rc2</span><br></pre></td></tr></table></figure><h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><h5 id="设置host"><a href="#设置host" class="headerlink" title="设置host"></a>设置host</h5><p>分别登陆三台服务器设置主机ip到环境变量，或者在启动mesos的参数中设置，本次我们选择在启动参数中设置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ HOST_IP=192.168.24.17x</span><br></pre></td></tr></table></figure></p><h5 id="master"><a href="#master" class="headerlink" title="master"></a>master</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d --net=host --restart always --name m1 \</span><br><span class="line">  -e MESOS_PORT=5050 \</span><br><span class="line">  -e MESOS_HOSTNAME=192.168.24.173 \</span><br><span class="line">  -e MESOS_IP=192.168.24.173 \</span><br><span class="line">  -e MESOS_ZK=zk://192.168.24.173:2181,192.168.24.179:2181,192.168.24.178:2181/mesos \</span><br><span class="line">  -e MESOS_QUORUM=2 \</span><br><span class="line">  -e MESOS_REGISTRY=in_memory \</span><br><span class="line">  -e MESOS_LOG_DIR=/var/log/mesos \</span><br><span class="line">  -e MESOS_WORK_DIR=/var/tmp/mesos \</span><br><span class="line">  -v &quot;$(pwd)/log/mesos:/var/log/mesos&quot; \</span><br><span class="line">  -v &quot;$(pwd)/tmp/mesos:/var/tmp/mesos&quot; \</span><br><span class="line">  mesosphere/mesos-master:1.5.0</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d --net=host --restart always --name m2 \</span><br><span class="line">  -e MESOS_PORT=5050 \</span><br><span class="line">  -e MESOS_HOSTNAME=192.168.24.179 \</span><br><span class="line">  -e MESOS_IP=192.168.24.179 \</span><br><span class="line">  -e MESOS_ZK=zk://192.168.24.173:2181,192.168.24.179:2181,192.168.24.178:2181/mesos \</span><br><span class="line">  -e MESOS_QUORUM=2 \</span><br><span class="line">  -e MESOS_REGISTRY=in_memory \</span><br><span class="line">  -e MESOS_LOG_DIR=/var/log/mesos \</span><br><span class="line">  -e MESOS_WORK_DIR=/var/tmp/mesos \</span><br><span class="line">  -v &quot;$(pwd)/log/mesos:/var/log/mesos&quot; \</span><br><span class="line">  -v &quot;$(pwd)/tmp/mesos:/var/tmp/mesos&quot; \</span><br><span class="line">  mesosphere/mesos-master:1.5.0</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d --net=host --restart always --name m3 \</span><br><span class="line">  -e MESOS_PORT=5050 \</span><br><span class="line">  -e MESOS_HOSTNAME=192.168.24.178 \</span><br><span class="line">  -e MESOS_IP=192.168.24.178 \</span><br><span class="line">  -e MESOS_ZK=zk://192.168.24.173:2181,192.168.24.179:2181,192.168.24.178:2181/mesos \</span><br><span class="line">  -e MESOS_QUORUM=2 \</span><br><span class="line">  -e MESOS_REGISTRY=in_memory \</span><br><span class="line">  -e MESOS_LOG_DIR=/var/log/mesos \</span><br><span class="line">  -e MESOS_WORK_DIR=/var/tmp/mesos \</span><br><span class="line">  -v &quot;$(pwd)/log/mesos:/var/log/mesos&quot; \</span><br><span class="line">  -v &quot;$(pwd)/tmp/mesos:/var/tmp/mesos&quot; \</span><br><span class="line">  mesosphere/mesos-master:1.5.0</span><br></pre></td></tr></table></figure><h5 id="marathon"><a href="#marathon" class="headerlink" title="marathon"></a>marathon</h5><p>192.168.24.178下部署marathon:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d --net=host --restart always --privileged \</span><br><span class="line">  --name mm3 \</span><br><span class="line">  mesosphere/marathon:latest \</span><br><span class="line">  --master zk://192.168.24.173:2181,192.168.24.179:2181,192.168.24.178:2181/mesos \</span><br><span class="line">  --zk zk://92.168.24.173:2181,192.168.24.179:2181,192.168.24.178:2181/marathon \</span><br><span class="line">  --http_port 8089 \</span><br><span class="line">  --http_address 192.168.24.178</span><br></pre></td></tr></table></figure></p><h5 id="slave"><a href="#slave" class="headerlink" title="slave"></a>slave</h5><p>在192.168.24.173下暂时不部署slave，但预留命名m1s1和m1s2.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it -d --restart always --net=host --name m1s1 --privileged \</span><br><span class="line">  -e MESOS_PORT=5051 \</span><br><span class="line">  -e MESOS_HOSTNAME=192.168.24.173 \</span><br><span class="line">  -e MESOS_IP=192.168.24.173 \</span><br><span class="line">  -e MESOS_MASTER=zk://192.168.24.173:2181,192.168.24.179:2181,192.168.24.178:2181/mesos \</span><br><span class="line">  -e MESOS_CONTAINERIZERS=docker,mesos \</span><br><span class="line">  -e MESOS_LOG_DIR=/var/log/mesos \</span><br><span class="line">  -e MESOS_WORK_DIR=/var/tmp/mesos \</span><br><span class="line">  -v &quot;$(pwd)/log/mesos:/var/log/mesos&quot; \</span><br><span class="line">  -v &quot;$(pwd)/tmp/mesos:/var/tmp/mesos&quot; \</span><br><span class="line">  mesosphere/mesos-slave:1.6.1-rc2</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it -d --restart always --net=host --name m1s2 --privileged \</span><br><span class="line">  -e MESOS_PORT=5052 \</span><br><span class="line">  -e MESOS_MASTER=zk://192.168.24.173:2181,192.168.24.179:2181,192.168.24.178:2181/mesos \</span><br><span class="line">  -e MESOS_LOG_DIR=/var/log/mesos \</span><br><span class="line">  -e MESOS_WORK_DIR=/var/tmp/mesos \</span><br><span class="line">  -v &quot;$(pwd)/log/mesos:/var/log/mesos&quot; \</span><br><span class="line">  -v &quot;$(pwd)/tmp/mesos:/var/tmp/mesos&quot; \</span><br><span class="line">  mesosphere/mesos-slave:1.6.1-rc2</span><br></pre></td></tr></table></figure><p>在192.168.24.179下启动2个slave，分别命名为m2s1和m2s2.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it -d --restart always --net=host \</span><br><span class="line">  --name m2s1 \</span><br><span class="line">  --privileged \</span><br><span class="line">  -e MESOS_PORT=5051 \</span><br><span class="line">  -e MESOS_MASTER=zk://192.168.24.173:2181,192.168.24.179:2181,192.168.24.178:2181/mesos \</span><br><span class="line">  -e MESOS_SWITCH_USER=0 \</span><br><span class="line">  -e MESOS_CONTAINERIZERS=docker,mesos \</span><br><span class="line">  -e MESOS_LOG_DIR=/var/log/mesos \</span><br><span class="line">  -e MESOS_WORK_DIR=/var/tmp/mesos \</span><br><span class="line">  -v &quot;$(pwd)/log/mesos:/var/log/mesos&quot; \</span><br><span class="line">  -v &quot;$(pwd)/tmp/mesos:/var/tmp/mesos&quot; \</span><br><span class="line">  -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  -v /cgroup:/cgroup \</span><br><span class="line">  -v /sys:/sys \</span><br><span class="line">  -v /usr/local/bin/docker:/usr/local/bin/docker \</span><br><span class="line">  mesosphere/mesos-slave:1.5.0 \</span><br><span class="line">  --ip=192.168.24.179</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it -d --restart always --net=host --name m2s2 --privileged \</span><br><span class="line">  -e MESOS_PORT=5052 \</span><br><span class="line">  -e MESOS_MASTER=zk://192.168.24.173:2181,192.168.24.179:2181,192.168.24.178:2181/mesos \</span><br><span class="line">  -e MESOS_LOG_DIR=/var/log/mesos \</span><br><span class="line">  -e MESOS_WORK_DIR=/var/tmp/mesos \</span><br><span class="line">  -v &quot;$(pwd)/log/mesos:/var/log/mesos&quot; \</span><br><span class="line">  -v &quot;$(pwd)/tmp/mesos:/var/tmp/mesos&quot; \</span><br><span class="line">  mesosphere/mesos-slave:1.6.1-rc2</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it -d --restart always --net=host --name m2s3 --privileged \</span><br><span class="line">  -e MESOS_PORT=5053 \</span><br><span class="line">  -e MESOS_MASTER=zk://192.168.24.173:2181,192.168.24.179:2181,192.168.24.178:2181/mesos \</span><br><span class="line">  -e MESOS_SWITCH_USER=0 \</span><br><span class="line">  -e MESOS_CONTAINERIZERS=docker,mesos \</span><br><span class="line">  -e MESOS_LOG_DIR=/var/log/mesos \</span><br><span class="line">  -e MESOS_WORK_DIR=/var/tmp/mesos \</span><br><span class="line">  -v &quot;$(pwd)/log/mesos:/var/log/mesos&quot; \</span><br><span class="line">  -v &quot;$(pwd)/tmp/mesos:/var/tmp/mesos&quot; \</span><br><span class="line">  -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  -v /cgroup:/cgroup \</span><br><span class="line">  -v /sys:/sys \</span><br><span class="line">  -v /usr/local/bin/docker:/usr/local/bin/docker \</span><br><span class="line">  mesosphere/mesos-slave:1.6.1-rc2 \</span><br><span class="line">  --ip=192.168.24.179 \</span><br><span class="line">  --launcher=posix</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --net=host --privileged \</span><br><span class="line">  --name mesos_slave \</span><br><span class="line">  -e MESOS_PORT=5051 \</span><br><span class="line">  -e MESOS_MASTER=zk://192.168.24.179:2181/mesos \</span><br><span class="line">  -e MESOS_SWITCH_USER=0 \</span><br><span class="line">  -e MESOS_CONTAINERIZERS=docker,mesos \</span><br><span class="line">  -e MESOS_LOG_DIR=/var/log/mesos \</span><br><span class="line">  -e MESOS_WORK_DIR=/var/tmp/mesos \</span><br><span class="line">  -v &quot;$(pwd)/log/mesos:/var/log/mesos&quot; \</span><br><span class="line">  -v &quot;$(pwd)/tmp/mesos:/var/tmp/mesos&quot; \</span><br><span class="line">  -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  -v /sys/fs/cgroup:/cgroup \</span><br><span class="line">  -v /sys:/sys \</span><br><span class="line">  -v /usr/bin/docker:/usr/local/bin/docker \</span><br><span class="line">  mesosphere/mesos-slave:1.1.0-2.0.107.ubuntu1404 \</span><br><span class="line">  --ip=192.168.24.179 \</span><br><span class="line">  --launcher=posix</span><br></pre></td></tr></table></figure><p>在192.168.24.178下启动2个slave，分别命名为m3s1和m3s2.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it -d --restart always --net=host --name m3s1 --privileged \</span><br><span class="line">  -e MESOS_PORT=5053 \</span><br><span class="line">  -e MESOS_HOSTNAME=192.168.24.178 \</span><br><span class="line">  -e MESOS_IP=192.168.24.178 \</span><br><span class="line">  -e MESOS_MASTER=zk://192.168.24.173:2181,192.168.24.179:2181,192.168.24.178:2181/mesos \</span><br><span class="line">  -e MESOS_CONTAINERIZERS=docker,mesos \</span><br><span class="line">  -e MESOS_LOG_DIR=/var/log/mesos \</span><br><span class="line">  -e MESOS_WORK_DIR=/var/tmp/mesos \</span><br><span class="line">  -v &quot;$(pwd)/log/mesos:/var/log/mesos&quot; \</span><br><span class="line">  -v &quot;$(pwd)/tmp/mesos:/var/tmp/mesos&quot; \</span><br><span class="line">  -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  -v /cgroup:/cgroup \</span><br><span class="line">  -v /sys:/sys \</span><br><span class="line">  -v /usr/local/bin/docker:/usr/local/bin/docker \</span><br><span class="line">  mesosphere/mesos-slave:1.6.1-rc2</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it -d --restart always --net=host --name m3s2 --privileged \</span><br><span class="line">  -e MESOS_PORT=5052 \</span><br><span class="line">   -e MESOS_HOSTNAME=192.168.24.178 \</span><br><span class="line">  -e MESOS_IP=192.168.24.178 \</span><br><span class="line">  -e MESOS_MASTER=zk://192.168.24.173:2181,192.168.24.179:2181,192.168.24.178:2181/mesos \</span><br><span class="line">  -e MESOS_LOG_DIR=/var/log/mesos \</span><br><span class="line">  -e MESOS_WORK_DIR=/var/tmp/mesos \</span><br><span class="line">  -v &quot;$(pwd)/log/mesos:/var/log/mesos&quot; \</span><br><span class="line">  -v &quot;$(pwd)/tmp/mesos:/var/tmp/mesos&quot; \</span><br><span class="line">  mesosphere/mesos-slave:1.6.1-rc2</span><br></pre></td></tr></table></figure><h3 id="Spark嵌入"><a href="#Spark嵌入" class="headerlink" title="Spark嵌入"></a>Spark嵌入</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>通过docker搭建zookeeper</title>
    <link href="undefined2019/09/14/%E9%80%9A%E8%BF%87docker%E6%90%AD%E5%BB%BAzookeeper%E9%9B%86%E7%BE%A4/"/>
    <url>2019/09/14/%E9%80%9A%E8%BF%87docker%E6%90%AD%E5%BB%BAzookeeper%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://zookeeper.apache.org/doc/current/zookeeperStarted.html" target="_blank" rel="noopener">ZooKeeper Getting Started Guide</a><br><a href="https://blog.csdn.net/zhufuyi/article/details/72782350?locationNum=6&amp;fps=1" target="_blank" rel="noopener">Mesos+Zookeeper+Marathon的Docker管理平台部署记录</a><br><a href="http://blog.sina.com.cn/s/blog_8ea8e9d50102wx24.html" target="_blank" rel="noopener">docker部署zookeeper集群</a><br><a href="https://www.jianshu.com/p/14d30aa63dc9" target="_blank" rel="noopener">Docker环境搭建ZooKeeper集群</a></p><h2 id="环境组网"><a href="#环境组网" class="headerlink" title="环境组网"></a>环境组网</h2><h3 id="组网策略"><a href="#组网策略" class="headerlink" title="组网策略"></a>组网策略</h3><p>准备三台server搭建zookeeper最小化集群，以达成主备份关系，为后期mesos集群的管理和调度做准备</p><h3 id="节点主机配置"><a href="#节点主机配置" class="headerlink" title="节点主机配置"></a>节点主机配置</h3><p>储备三台服务器如下：<br>主机系统 | ip地址<br>—|—<br>ubuntu16.04 server | 192.168.24.173<br>ubuntu16.04 server | 192.168.24.179<br>ubuntu16.04 server | 192.168.24.178</p><h2 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h2><h3 id="软件配置"><a href="#软件配置" class="headerlink" title="软件配置"></a>软件配置</h3><h4 id="软件版本"><a href="#软件版本" class="headerlink" title="软件版本"></a>软件版本</h4><p>我们选择docker启动容器的方法来部署zookeeper，考虑到后期部署spark on mesos时版本的兼容性，这里选择zookeeper-3.4.13 。如下为集群的软件版本规划：<br>软件 | 版本<br>— | —<br>zookeeper | 3.4.13<br>mesos | 1.6.1<br>spark | 2.2.2</p><h4 id="zookeeper的docker容器选择"><a href="#zookeeper的docker容器选择" class="headerlink" title="zookeeper的docker容器选择"></a>zookeeper的docker容器选择</h4><p>在参阅 <a href="https://hub.docker.com/search/?isAutomated=0&amp;isOfficial=0&amp;page=1&amp;pullCount=0&amp;q=zookeeper&amp;starCount=0" target="_blank" rel="noopener">docker hub</a> 中的众多的zookeeper容器后，选择使用人群较多，dockerfile中版本配置比较新的 <a href="https://hub.docker.com/r/jplock/zookeeper/" target="_blank" rel="noopener">jplock/zookeeper:3.4.13</a> 作为本次集群搭建的zookeeper容器版本。  </p><h5 id="容器中的软件及版本"><a href="#容器中的软件及版本" class="headerlink" title="容器中的软件及版本"></a>容器中的软件及版本</h5><table><thead><tr><th>软件名</th><th>来源</th><th>版本</th></tr></thead><tbody><tr><td>jdk</td><td>openjdk:8-jre-alpine</td><td>jdk8</td></tr><tr><td>zookeeper</td><td><a href="http://apache.mirrors.pair.com" target="_blank" rel="noopener">http://apache.mirrors.pair.com</a></td><td>3.4.13</td></tr></tbody></table><h5 id="dockerFile"><a href="#dockerFile" class="headerlink" title="dockerFile"></a>dockerFile</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">FROM openjdk:8-jre-alpine</span><br><span class="line"></span><br><span class="line">ARG MIRROR=http://apache.mirrors.pair.com</span><br><span class="line">ARG VERSION=3.4.13</span><br><span class="line"></span><br><span class="line">LABEL name=&quot;zookeeper&quot; version=$VERSION</span><br><span class="line"></span><br><span class="line">RUN apk add --no-cache wget bash \</span><br><span class="line">    &amp;&amp; mkdir -p /opt/zookeeper \</span><br><span class="line">    &amp;&amp; wget -q -O - $MIRROR/zookeeper/zookeeper-$VERSION/zookeeper-$VERSION.tar.gz \</span><br><span class="line">      | tar -xzC /opt/zookeeper --strip-components=1 \</span><br><span class="line">    &amp;&amp; cp /opt/zookeeper/conf/zoo_sample.cfg /opt/zookeeper/conf/zoo.cfg \</span><br><span class="line">    &amp;&amp; mkdir -p /tmp/zookeeper</span><br><span class="line"></span><br><span class="line">EXPOSE 2181 2888 3888</span><br><span class="line"></span><br><span class="line">WORKDIR /opt/zookeeper</span><br><span class="line"></span><br><span class="line"># Only checks if server is up and listening, not quorum. </span><br><span class="line"># See https://zookeeper.apache.org/doc/r3.4.13/zookeeperAdmin.html#sc_zkCommands</span><br><span class="line">HEALTHCHECK CMD [ $(echo ruok | nc 127.0.0.1:2181) == &quot;imok&quot; ] || exit 1</span><br><span class="line"></span><br><span class="line">VOLUME [&quot;/opt/zookeeper/conf&quot;, &quot;/tmp/zookeeper&quot;]</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;/opt/zookeeper/bin/zkServer.sh&quot;]</span><br><span class="line">CMD [&quot;start-foreground&quot;]</span><br></pre></td></tr></table></figure><h3 id="单个节点的配置"><a href="#单个节点的配置" class="headerlink" title="单个节点的配置"></a>单个节点的配置</h3><h4 id="zoo-cfg配置"><a href="#zoo-cfg配置" class="headerlink" title="zoo.cfg配置"></a>zoo.cfg配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ vi /conf/zoo.cfg</span><br><span class="line"></span><br><span class="line">tickTime=2000</span><br><span class="line">initLimit=5</span><br><span class="line">syncLimit=2</span><br><span class="line">#maxClientCnxns=60</span><br><span class="line">#autopurge.snapRetainCount=3</span><br><span class="line">#autopurge.purgeInterval=1</span><br><span class="line"></span><br><span class="line">dataDir=/opt/zookeeper/data</span><br><span class="line"></span><br><span class="line">clientPort=2181</span><br><span class="line">server.1=192.168.24.173:2888:3888</span><br><span class="line">server.2=192.168.24.178:2888:3888</span><br><span class="line">server.3=192.168.24.179:2888:3888</span><br></pre></td></tr></table></figure><h4 id="myid配置"><a href="#myid配置" class="headerlink" title="myid配置"></a>myid配置</h4><p>在集群每个节点的zookeeper中修改或创建./data/myid文件，并在其中写入1~255之间的值，该值即为节点编号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir data</span><br><span class="line">$ vi /data/myid</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="拷贝容器配置到主机"><a href="#拷贝容器配置到主机" class="headerlink" title="拷贝容器配置到主机"></a>拷贝容器配置到主机</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker container cp zk178:/opt/zookeeper/conf /opt/zookeeper</span><br><span class="line"></span><br><span class="line">$ sudo docker container cp zk178:/opt/zookeeper/data /opt/zookeeper</span><br></pre></td></tr></table></figure><h2 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h2><h3 id="启动参数策略"><a href="#启动参数策略" class="headerlink" title="启动参数策略"></a>启动参数策略</h3><h3 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -tid --restart=always \</span><br><span class="line">    --net=host \</span><br><span class="line">    -v /opt/zookeeper/data:/opt/zookeeper/data \</span><br><span class="line">    -v /opt/zookeeper/logs:/opt/zookeeper/logs \</span><br><span class="line">    -v /opt/zookeeper/conf:/opt/zookeeper/conf \</span><br><span class="line">    --name=zk173 \</span><br><span class="line">    jplock/zookeeper:3.4.13</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="测试命令："><a href="#测试命令：" class="headerlink" title="测试命令："></a>测试命令：</h4><p>通过如下命令测试集群是否联网正常。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo stat | nc 127.0.0.1 2181</span><br></pre></td></tr></table></figure></p><h4 id="测试结果："><a href="#测试结果：" class="headerlink" title="测试结果："></a>测试结果：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ echo stat | nc 127.0.0.1 2181</span><br><span class="line">Zookeeper version: 3.4.13-2d71af4dbe22557fda74f9a9b4309b15a7487f03, built on 06/29/2018 04:05 GMT</span><br><span class="line">Clients:</span><br><span class="line"> /127.0.0.1:39122[0](queued=0,recved=1,sent=0)</span><br><span class="line"></span><br><span class="line">Latency min/avg/max: 0/0/0</span><br><span class="line">Received: 3</span><br><span class="line">Sent: 2</span><br><span class="line">Connections: 1</span><br><span class="line">Outstanding: 0</span><br><span class="line">Zxid: 0x10000000c</span><br><span class="line">Mode: follower</span><br><span class="line">Node count: 8</span><br><span class="line">➜  ~</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">topiot@iots2:~$ echo stat | nc 127.0.0.1 2181</span><br><span class="line">Zookeeper version: 3.4.13-2d71af4dbe22557fda74f9a9b4309b15a7487f03, built on 06/29/2018 04:05 GMT</span><br><span class="line">Clients:</span><br><span class="line"> /127.0.0.1:55782[1](queued=0,recved=1370,sent=1371)</span><br><span class="line"> /127.0.0.1:55790[0](queued=0,recved=1,sent=0)</span><br><span class="line"> /127.0.0.1:55780[1](queued=0,recved=1372,sent=1374)</span><br><span class="line"> /127.0.0.1:55784[1](queued=0,recved=1371,sent=1373)</span><br><span class="line"> /127.0.0.1:55778[1](queued=0,recved=1372,sent=1374)</span><br><span class="line"></span><br><span class="line">Latency min/avg/max: 0/0/81</span><br><span class="line">Received: 5639</span><br><span class="line">Sent: 5645</span><br><span class="line">Connections: 5</span><br><span class="line">Outstanding: 0</span><br><span class="line">Zxid: 0x10000000c</span><br><span class="line">Mode: leader</span><br><span class="line">Node count: 8</span><br><span class="line">Proposal sizes last/min/max: 36/36/338</span><br><span class="line">topiot@iots2:~$</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">topiot@iots3:~$ echo stat | nc 127.0.0.1 2181</span><br><span class="line">Zookeeper version: 3.4.13-2d71af4dbe22557fda74f9a9b4309b15a7487f03, built on 06/29/2018 04:05 GMT</span><br><span class="line">Clients:</span><br><span class="line"> /127.0.0.1:39678[1](queued=0,recved=1390,sent=1390)</span><br><span class="line"> /127.0.0.1:39680[1](queued=0,recved=1390,sent=1390)</span><br><span class="line"> /127.0.0.1:39682[1](queued=0,recved=1390,sent=1390)</span><br><span class="line"> /127.0.0.1:41312[0](queued=0,recved=1,sent=0)</span><br><span class="line"></span><br><span class="line">Latency min/avg/max: 0/0/74</span><br><span class="line">Received: 4326</span><br><span class="line">Sent: 4325</span><br><span class="line">Connections: 4</span><br><span class="line">Outstanding: 0</span><br><span class="line">Zxid: 0x10000000c</span><br><span class="line">Mode: follower</span><br><span class="line">Node count: 8</span><br><span class="line">topiot@iots3:~$</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>